1.What is a Closure?

a closure gives you access to an outer function’s scope from an inner function. In JavaScript, closures are created every time a function is created, at function creation time.

To use a closure, define a function inside another function and expose it. To expose a function, return it or pass it to another function.The inner function will have access to 
the variables in the outer function scope, even after the outer function has returned.

Among other things, closures are commonly used to give objects data privacy.

When you use closures for data privacy, the enclosed variables are only in scope within the containing (outer) function.
-----------------------------------------------------
2.What is Hoisting?

Hoisting is a JavaScript mechanism where variables and function declarations are moved to the top of their scope before code execution.
-----------------------------------------------------
3. What is expression?

an expression produces a value and can be written wherever a value is expected.
Keep in mind that if a function doesn’t return a value explicitly it returns undefined by default. That’s why we see undefined each time we call console.log().
-----------------------------------------------------
4.what is statement?

A statement performs an action. For example, an if statement cannot become the argument of a function.
-----------------------------------------------------
5.What is an event delegation?

Event delegation is a technique for listening to events.where you delegate a parent element as the listener for all of the events that happen inside it.
-----------------------------------------------------
6.What is an event loop?

The Event Loop is a queue of callback functions. When an async function executes, the callback function is pushed into the queue. The JavaScript engine doesn't start processing the event loop until the async function has finished executing the code. Note: It allows Node.js to perform non-blocking I/O operations even though JavaScript is single-threaded.

The job of event loop is to constantly monitor message queue and Execution Stack and push the first callback function to the Execution Stack as soon as the Execution Context is empty.
-----------------------------------------------------
7.What is an event flow?

Event flow is the order in which event is received on the web page. When you click an element that is nested in various other elements, before your click actually reaches its destination, or target element, it must trigger the click event for each of its parent elements first, starting at the top with the global window object. There are two ways of event flow

 I.Top to Bottom(Event Capturing)
II.Bottom to Top (Event Bubbling)
-----------------------------------------------------
8.What is event capturing?

Event capturing is a type of event propagation where the event is first captured by the outermost element, and then successively triggers on the descendants (children) of the target element in the same nesting hierarchy till it reaches the innermost DOM element.
-----------------------------------------------------
9.What is event bubbling?

Event bubbling is a type of event propagation where the event first triggers on the innermost target element, and then successively triggers on the ancestors (parents) of the target element in the same nesting hierarchy till it reaches the outermost DOM element.
-----------------------------------------------------
10.What is the difference between document load and DOMContentLoaded events?

The DOMContentLoaded event is fired when the initial HTML document has been completely loaded and parsed, without waiting for assets(stylesheets, images, and subframes) to finish loading. Whereas The load event is fired when the whole page has loaded, including all dependent resources(stylesheets, images).
-----------------------------------------------------
11.What's the difference between event.preventDefault() and event.stopPropagation() methods in JavaScript?

In JavaScript, the event.preventDefault() method is used to prevent the default behavior of an element.

For example: If you use it in a form element, it prevents it from submitting. If used in an anchor element, it prevents it from navigating. If used in a contextmenu, it prevents it from showing or displaying.

On the other hand, the event.stopPropagation() method is used to stop the propagation of an event or stop the event from occurring in the bubbling or capturing phase.
-----------------------------------------------------
12.What is a pure function?

A Pure function is a function where the return value is only determined by its arguments without any side effects. i.e, If you call a function with the same arguments 'n' number of times and 'n' number of places in the application then it will always return the same value.
-----------------------------------------------------
13.What are the recommendations to create new object?

var v1 = {};           new Object();
var v2 = "";           new String();
var v3 = 0;            new Number();
var v4 = false;        new Boolean();
var v5 = [];           new Array();
var v6 = /()/;         new RegExp();
var v7 = function(){}; new Function();
-----------------------------------------------------
14.What is the currying function?

Currying is the process of taking a function with multiple arguments and turning it into a sequence of functions each with only a single argument.

const curryUnaryFunction = a => b => c => a + b + c;
curryUnaryFunction (1); // returns a function: b => c =>  1 + b + c
curryUnaryFunction (1) (2); // returns a function: c => 3 + c
curryUnaryFunction (1) (2) (3); // returns the number 6
-----------------------------------------------------
15.What is a Regular Expression?

A regular expression is a sequence of characters that forms a search pattern.

/pattern/modifiers;

Modifier
i          Perform case-insensitive matching
g          Perform a global match rather than stops at first match
m          Perform multiline matching
-----------------------------------------------------
16.What are the different methods to find HTML elements in DOM?

  I.document.getElementById(id): It finds an element by Id (non array)
 II.document.getElementsByTagName(name): It finds an element by tag name (array)
III.document.getElementsByClassName(name): It finds an element by class name (array)
-----------------------------------------------------
17.How do you swap variables in destructuring assignment?

var x = 10, y = 20;

[x, y] = [y, x];
console.log(x); // 20
console.log(y); // 10
-----------------------------------------------------
18.What is the purpose of double tilde operator?

The double tilde operator(~~) is known as double NOT bitwise operator. This operator is going to be a quicker substitute for Math.floor().
-----------------------------------------------------
19.What happens if we add two arrays?

If you add two arrays together, it will convert them both to strings and concatenate them. For example, the result of adding arrays would be as below,

console.log(['a'] + ['b']);  // "ab"
console.log([] + []); // ""
console.log(![] + []); // "false", because ![] returns false.
-----------------------------------------------------
20.How do you get unique values of an array?

console.log([...new Set([1, 2, 4, 4, 3])]); // [1, 2, 4, 3]
-----------------------------------------------------
21.What is nullish coalescing operator (??)?

It is a logical operator that returns its right-hand side operand when its left-hand side operand is null or undefined, and otherwise returns its left-hand side operand. This can be contrasted with the logical OR (||) operator, which returns the right-hand side operand if the left operand is any falsy value, not only null or undefined.
-----------------------------------------------------
22.What is heap?

Heap(Or memory heap) is the memory location where objects are stored when we define variables. i.e, This is the place where all the memory allocations and de-allocation take place. Both heap and call-stack are two containers of JS runtime. Whenever runtime comes across variables and function declarations in the code it stores them in the Heap.
-----------------------------------------------------
23.How do you detect primitive or non primitive value type?

In JavaScript, primitive types include boolean, string, number, BigInt, null, Symbol and undefined. Whereas non-primitive types include the Objects. But you can easily identify them with the below function,

function isPrimitive(val) {
    return Object(val) !== val;
}
-----------------------------------------------------
24.What is a higher order function?

Higher-order function is a function that accepts another function as an argument or returns a function as a return value or both.
-----------------------------------------------------
25.Arrow function vs Regular function?

The arrow function doesn’t define its own execution context.
No matter how or where being executed, this value inside of an arrow function always equals this value from the outer function.

the regular function can easily construct objects.
A consequence of this resolved lexically is that an arrow function cannot be used as a constructor.

You can return values from the arrow function the same way as from a regular function, but with one useful exception.
If the arrow function contains one expression, and you omit the function’s curly braces, then the expression is implicitly returned. These are the inline arrows function.
-----------------------------------------------------
26.

backtick quotes ` allow to split the string into multiple lines.
************
// before running the transpiler
height = height ?? 100;
// after running the transpiler
height = (height !== undefined && height !== null) ? height : 100;
************
let user = {
  name: "John",
  age: 30
};

// loop over keys-and-values
for (let [key, value] of Object.entries(user)) {
  alert(`${key}:${value}`); // name:John, then age:30
}
************
// Let's swap the values: make guest=Pete, admin=Jane
[guest, admin] = [admin, guest];
************
// default values
let [name = "Guest", surname = "Anonymous"] = ["Julius"];

alert(name);    // Julius (from array)
alert(surname); // Anonymous (default used)
************
let options = {
  title: "Menu"
};

let {width = prompt("width?"), title = prompt("title?")} = options;

alert(title);  // Menu
alert(width);  // (whatever the result of prompt is)
************
let title, width, height;

// okay now
({title, width, height} = {title: "Menu", width: 200, height: 100});
************
let fruits = ["Apple"];

fruits.push("Orange", "Peach");
fruits.unshift("Pineapple", "Lemon");

// ["Pineapple", "Lemon", "Apple", "Orange", "Peach"]
************
let arr = ["t", "e", "s", "t"];
alert( arr.slice(1, 3) ); // e,s (copy from 1 to 3)
alert( arr.slice(-2) ); // s,t (copy from -2 till the end)
************
const arr = [NaN];
alert( arr.indexOf(NaN) ); // -1 (should be 0, but === equality doesn't work for NaN)
************
let arr = 'Bilbo, Gandalf, Nazgul, Saruman'.split(', ', 2);

alert(arr); // Bilbo, Gandalf
************
backtick template literal ``
-----------------------------------------------------
27.Performance

Methods push/pop run fast, while shift/unshift are slow.
-----------------------------------------------------
28.Methods array.splice

array.splice(start[, deleteCount, elem1, ..., elemN])
array.splice(1, 1); // from index 1 remove 1 element

// remove 3 first elements and replace them with another
arr.splice(0, 3, "Let's", "dance");

// from index -1 (one step from the end)
// delete 0 elements,
// then insert 3 and 4
arr.splice(-1, 0, 3, 4);
-----------------------------------------------------
29.Call and Apply

The only syntax difference between call and apply is that call expects a list of arguments, while apply takes an array-like object with them.
func.call(context, ...args);
func.apply(context, args_array);
-----------------------------------------------------
30.What is the role of a strict mode in JavaScript?

The JavaScript strict mode is used to generates silent errors. It provides "use strict"; expression to enable the strict mode. This expression can only be placed as the first statement in a script or a function.
-----------------------------------------------------
31.what does explicitly implicitly mean in javascript?

"Implicitly" means that the JS engine does it. "Explicitly" means that you must do it.
-----------------------------------------------------
32.Prototypes & Inheritance?

JavaScript is a prototype-based language. Inheritance made possible through prototype property that every object has. To provide inheritance, objects can have a prototype property object, which acts as a template object that it inherits methods and properties from.
The prototype property of an object is where we put methods and properties that we want other objects to inherit.
When a certain method or property is called, the search starts in the object itself, and if it cannot be found, the search moves on to the object’s prototype. This continues until the method is found. We want to reiterate that the methods and properties are not copied from one object to another in the prototype chain. They are accessed by walking up the chain as described above.
-----------------------------------------------------
33.String methods

slice(start,end)
//substring() is similar to slice()
//The difference is that substring() cannot accept negative indexes

split(" ")//return array split with space

let arr = [1, 2, 3, 4, 5];
let result = arr.reduce((sum, current) => sum + current, 0);//15


let result = arr.find(function(item, index, array) {
  // if true is returned, item is returned and iteration is stopped
  // for falsy scenario returns undefined
});

let str = "Mr Blue has a blue house and a blue car";
str.replace(/blue/gi, (x)=>x.uppercase());//case insensitive and global search

let str = "Mr. Blue has a blue house";
str.search(/blue/i)   // Returns 4

const pattern = /e/;
pattern.test("The best things in life are free!");

-----------------------------------------------------
34.What is a callback hell?

Callback Hell is an anti-pattern with multiple nested callbacks which makes code hard to read and debug when dealing with asynchronous logic.
-----------------------------------------------------
35.What is a spread operator?

Spread operator allows iterables( arrays / objects / strings ) to be expanded into single arguments/elements. Let's take an example to see this behavior,
-----------------------------------------------------
36.How do you decode an URL?

var uri = 'https://mozilla.org/?x=шеллы';
 var encoded = encodeURI(uri);
 console.log(encoded); // https://mozilla.org/?x=%D1%88%D0%B5%D0%BB%D0%BB%D1%8B
try {
  console.log(decodeURI(encoded)); // "https://mozilla.org/?x=шеллы"
} catch(e) { // catches a malformed URI
  console.error(e);
}
-----------------------------------------------------
37.What is an anonymous function?

An anonymous function is a function without a name!
Anonymous functions are commonly assigned to a variable name or used as a callback function.
-----------------------------------------------------
38.What is call stack?

Call Stack is a data structure for javascript interpreters to keep track of function calls in the program. It has two major actions,

Whenever you call a function for its execution, you are pushing it to the stack.
Whenever the execution is completed, the function is popped out of the stack.
-----------------------------------------------------
39.How do you load CSS and JS files dynamically?

function loadAssets(filename, filetype) {
  if (filetype == "css") { // External CSS file
       var fileReference = document.createElement("link")
       fileReference.setAttribute("rel", "stylesheet");
       fileReference.setAttribute("type", "text/css");
       fileReference.setAttribute("href", filename);
  } else if (filetype == "js") { // External JavaScript file
       var fileReference = document.createElement('script');
       fileReference.setAttribute("type", "text/javascript");
       fileReference.setAttribute("src", filename);
  }
  if (typeof fileReference != "undefined")
       document.getElementsByTagName("head")[0].appendChild(fileReference)
 }
-----------------------------------------------------
40.What are default values in destructuring assignment

Arrays destructuring:
var x, y, z;
[x=2, y=4, z=6] = [10];
console.log(x); // 10
console.log(y); // 4
console.log(z); // 6

Objects destructuring:
var {x=2, y=4, z=6} = {x: 10};
console.log(x); // 10
console.log(y); // 4
console.log(z); // 6
-----------------------------------------------------
41.name

() paranthesese
[] square brackets
{} curly brackets
<> angle bracket
-----------------------------------------------------
42.Short circuit conditions?

if (authenticate) {
   loginToPorta();
}

authenticate && loginToPorta();
-----------------------------------------------------
43.What is the difference between == and === operators?

0 == false   // true
0 === false  // false
1 == "1"     // true
1 === "1"    // false
null == undefined // true
null === undefined // false
'0' == false // true
'0' === false // false
[]==[] or []===[] //false, refer different objects in memory
{}=={} or {}==={} //false, refer different objects in memory
-----------------------------------------------------
44.Why do you need a promise?

Promises are used to handle asynchronous operations. They provide an alternative approach for callbacks by reducing the callback hell and writing the cleaner code.

  i.Pending: This is an initial state of the Promise before an operation begins
 ii.Fulfilled: This state indicates that the specified operation was completed.
iii.Rejected: This state indicates that the operation did not complete. In this case an error value will be thrown.
-----------------------------------------------------
45.
















arrow function and regular function?
implicity
explicity
---------
mutable
prototype.language






